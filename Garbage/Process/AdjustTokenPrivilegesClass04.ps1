Import-Module -Name 'DatacenterAdvancedAutomation.Process'

$VerbosePreference     = [System.Management.Automation.ActionPreference]::Continue
$DebugPreference       = [System.Management.Automation.ActionPreference]::Continue
$ErrorActionPreference = [System.Management.Automation.ActionPreference]::Stop
Set-StrictMode -Version  'Latest'


# This works, where we have both struct and method in the same file


$name = 'SeIncreaseQuotaPrivilege'  # Adjust memory quotas for a process
$name = 'SeSecurityPrivilege'       # Manage auditing and security log


        $TokPriv1LuidDefinition = @'
            [StructLayout(LayoutKind.Sequential, Pack = 1)]
         // public   class  TokPriv1Luid
            public   struct TokPriv1Luid    // works
         // internal struct TokPriv1Luid
            {
                public int  Count;
                public long Luid;
                public int  Attr;
            }
'@

        $TypeParam = @{

            MemberDefinition = $TokPriv1LuidDefinition
            Name             = 'TokPriv1LuidClass'
            PassThru         = $True
            Debug            = $False
        }
        $TokPriv1LuidType = Add-Type @TypeParam


        $AdjustTokenPrivilegeDefinition = @'

            [DllImport(
                "advapi32.dll",
             // CharSet       = CharSet.Unicode,
                ExactSpelling = true,
                SetLastError  = true
            )]

         // https://docs.microsoft.com/windows/win32/api/securitybaseapi/nf-securitybaseapi-adjusttokenprivileges
            public   static extern bool AdjustTokenPrivileges(  // works
         // internal static extern bool AdjustTokenPrivileges(  // fails with 
                IntPtr TokenHandle,
                bool   DisableAllPrivileges,
             // ref TOKEN_PRIVILEGES NewState,
             // ref Object       NewState,   // does not generate any errors but does not have effect either. The privilege remains disabled.
                ref TokPriv1Luid NewState,   // works
             // ref Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes.TokPriv1LuidClass+TokPriv1Luid" NewState,
             // UInt32 BufferLengthInBytes,
                int    BufferLength,                
             // ref TOKEN_PRIVILEGES PreviousState,
                IntPtr PreviousState,   
             // out UInt32 ReturnLengthInBytes);
                IntPtr ReturnLength
            );

            [StructLayout(LayoutKind.Sequential, Pack = 1)]
         // public   class  TokPriv1Luid    // fails with “The parameter is incorrect”
            public   struct TokPriv1Luid    // works but with warning "The generated type defines no public methods or properties."
         // internal struct TokPriv1Luid    // fails with "parameter type 'ref Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes.AdjustTokenPrivilegesClass.TokPriv1Luid' is less accessible than method "
            {
                public int  Count;
                public long Luid;
                public int  Attr;
            }
'@



        $TypeParam = @{

            MemberDefinition = $AdjustTokenPrivilegeDefinition
            Name             = 'AdjustTokenPrivilegesClass'
            PassThru         = $True
            Debug            = $False
        }
        $AdjustTokenPrivilegesType = Add-Type @TypeParam


      # $NewState = $TokPriv1LuidType[1]::new()
        $NewState = $AdjustTokenPrivilegesType[1]::new()
      # $NewState = [TokPriv1Luid]::new()

        $NewState.Count = 1
      # $NewState.Luid  = 5  # SeIncreaseQuotaPrivilege
        $NewState.Luid  = Get-Privilege -Name $name
        $NewState.Attr  = 2  # SE_PRIVILEGE_ENABLED            = 0x00000002

        $Argument = @(

          # [System.IntPtr]   $Token     # TokenHandle
            [System.IntPtr]   ( Get-ProcessToken -DesiredAccess Query, AdjustPrivileges )
            [System.Boolean]  $False     # DisableAllPrivileges
          # [ref]             $NewState  # NewState
            [ref]             $NewState  # NewState
            [System.Int32]    $Null      # BufferLength
            [System.IntPtr]::Zero        # PreviousState
            [System.IntPtr]::Zero        # ReturnLength
        )

whoami.exe /priv | findstr.exe /i $name

        If
        (        
            $AdjustTokenPrivilegesType[0]::AdjustTokenPrivileges.Invoke( $Argument )
        )
        {
            $Message = 'Success'
            Write-Debug -Message $Message
        }
        Else        
        {
            Throw [System.ComponentModel.Win32Exception]::new()
        }   

whoami.exe /priv | findstr.exe /i $name