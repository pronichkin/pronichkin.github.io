 <#
    4. Creating a minimal class with explicit type definition

    What we've just used is the most basic parameter set for “Add-Type”, called
   “From member definition”. As we have observed, it allows us to crate a .NET
    class with no functioning code whatsoever. It does not do much, but it
    compiles.

    However, let's explore some other options of using “Add-Type”. The next 
    parameter set to look at is called “From type defintion”. As the name
    suggests, it takes a bit more than in the previous case. Instead of just
    proving the code for class memeber(s), or lack thereof, we need to describe
    the type, or class itself.

    Fortunately, we can rely on the example generated by PowerShell in the
    previous step, and build our class based on it.
  #>

$code = @'

    class myType04
    {    
        // we will add some code here
    }
'@

 <#
    note that we no longer need to specify the class name as a separate
    parameter as it's now provided inside our code.
  #>

$TypeParam = @{
    TypeDefinition     = $Code
}
Add-Type @TypeParam

 <#
    Classes created by “Add-Type” in “From member definition” parameter set are
    always “public.” The “Public” keyword (access modifier) was added to the class
    defintion in the actual source code created by “Add-Type” as shown on the
    previous step.
    
    A public class means it can be used outside of the assembly which it comes
    from.

    Now that we've created a class from our own definition, we have not specified
    that it's publc. Therefore, it's “Internal” by default. Practically speaking,
    we cannot interact with such class now. (We could only do that from other code
    within the same definition. And we don't have any other code there.) At this
    point, we cannot even explore the properties of this class.

    (We could do that if we specified “-PassThru” parameter to “Add-Type” and
    assigned its output to a variable, though.)
  #>