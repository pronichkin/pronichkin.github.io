 <#
    # 7-old

    Great, let's finally add some actual code to run in our method.
  #>

$Method = @'

    public static void myMethod()
    {
        // this is how you use the method. Previously, we did literally the same,
        // but in native PowerShell. Synthax is C# is slightly different, but the
        // basic idea is the same. You call the method and supply parameters in
        // specific order.
        // https://docs.microsoft.com/dotnet/api/system.windows.forms.messagebox

        System.Windows.Forms.MessageBox.Show( "This is the message" );
    }
'@

 <#
    Because we leverage a .NET class (MessageBox) here, we need to tell the compiler
    where to look for it. In other words, we'll refer to the assembly.
  #>

$TypeParam = @{

    MemberDefinition     = $Method
    Name                 = 'myType07'
    ReferencedAssemblies = 'System.Windows.Forms.dll'
}
Add-Type @TypeParam

 <# 
    Now we've created another type, named “Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes.myType07”

    If we call our static method, we'll have the code run, and we'll see an actual message box!
  #>

[Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes.myType07]::myMethod()