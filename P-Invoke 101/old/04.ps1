 <#
    # 6

    Let's add some code to our method. The code will actually use the Show method of MessageBox class.
  #>

$Method = @'

    // this defines a method. First word declares the method is private
    // second defined return type. Void means nothing. No output will be returned.
    // the thrid part gives the method a name.
    // () signifies it's in fact a method.

    private void MyBox()
    {
        // this is how you use the method. Previously, we did literally the same,
        // but in native PowerShell. Synthax is C# is slightly different, but the
        // basic idea is the same. You call the method and supply parameters in
        // specific order.
        // https://docs.microsoft.com/dotnet/api/system.windows.forms.messagebox

        MessageBox.Show( "This is the message", "This is my caption" );
    }
'@

$Method = @{

    MemberDefinition     = $Code
    Name                 = 'myType06'
    UsingNamespace       = 'System.Windows.Forms'
    ReferencedAssemblies = 'System.Windows.Forms.dll'
}
Add-Type @TypeParam

 <# 
$Instance = [Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes.myType03]::new()

 <#
    But so far, both the type itself
    
    this type has no methods. We cannot use it to do *anything*. We can create instances of this class, but they are pretty useless, too.

    To make use of it, we need to redefine our MyBox method as public.
  #>

