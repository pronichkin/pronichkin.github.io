 <#
    6. Defining a namespace

    Remember, when we used “from member definition” mode in “Add-Type”, it placed
    our newly created type under
   “Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes” namespace. This was
    handy for purposes like discovering it via intelli-sense (auto-completion.)

    Therefore, let's put our new type under some naspace as well.
  #>

$code = @'

    namespace Pronichkin.Sample
    {
        public class myType06
        {    
            // we will add some code here
        }
    }
'@

$TypeParam = @{

    TypeDefinition     = $Code
}
Add-Type @TypeParam

 <#
    Note that we have not specified a namespace, and therefore the class is 
   “orphaned” or stand-alone. In other words, it does not have a fully-qualified 
    name like “Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes.myType03”.

    But we can see that the class is now indeed Public, and the same default
    constructor member. With which we can create an instance of this class.
  #>
  
[Pronichkin.Sample.myType06].IsPublic

[Pronichkin.Sample.myType06].DeclaredConstructors

$myInstance06 = [Pronichkin.Sample.myType06]::new()